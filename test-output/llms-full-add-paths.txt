# Test Site

> Testing docusaurus-plugin-llms

This file contains all documentation content in a single document following the llmstxt.org standard.

## Core API Reference


This document provides detailed information about all core API methods and their parameters.

## Installation

```bash
npm install @example/core-api
```

## Methods

### initialize(options)

Initialize the API with the provided configuration options.

**Parameters:**

- `options` (Object): Configuration options
  - `apiKey` (string): Your API key
  - `environment` (string, optional): Environment to use ('production' or 'sandbox')
  - `timeout` (number, optional): Request timeout in milliseconds

**Returns:** 

Promise that resolves when initialization is complete.

**Example:**

```javascript
await api.initialize({
  apiKey: 'your-api-key',
  environment: 'production',
  timeout: 5000
});
```

### fetchData(endpoint, params)

Retrieve data from the specified endpoint.

**Parameters:**

- `endpoint` (string): API endpoint to call
- `params` (Object): Query parameters

**Returns:**

Promise that resolves with the fetched data.

**Example:**

```javascript
const data = await api.fetchData('users', { limit: 10 });
```

## Error Codes

| Code | Description |
|------|-------------|
| 401  | Unauthorized - Invalid API key |
| 404  | Resource not found |
| 429  | Rate limit exceeded |
| 500  | Server error |

---

## API Overview


This is the API overview.

---

## Plugins System


The plugin architecture allows you to extend the core functionality with custom modules.

## Overview

Our plugin system provides a flexible way to enhance the platform's capabilities without modifying the core code. Plugins can:

- Add new API endpoints
- Transform data during processing
- Hook into lifecycle events
- Create custom integrations
- Modify the system's behavior

## Plugin Structure

A basic plugin has the following structure:

```
my-plugin/
â”œâ”€â”€ plugin.json     # Plugin metadata
â”œâ”€â”€ index.js        # Main entry point
â”œâ”€â”€ actions/        # Custom actions
â”‚   â””â”€â”€ ...
â”œâ”€â”€ hooks/          # Event hooks
â”‚   â””â”€â”€ ...
â””â”€â”€ README.md       # Documentation
```

### The `plugin.json` File

This file contains essential metadata:

```json
{
  "name": "my-awesome-plugin",
  "version": "1.0.0",
  "displayName": "My Awesome Plugin",
  "description": "Adds awesome features to the platform",
  "main": "index.js",
  "author": "Your Name ",
  "license": "MIT",
  "compatibleWith": ">=2.5.0",
  "dependencies": {
    "other-plugin": ">=1.0.0"
  },
  "hooks": [
    "before:process",
    "after:process",
    "init"
  ],
  "permissions": [
    "READ_DATA",
    "MODIFY_SETTINGS"
  ]
}
```

## Creating a Plugin

### Step 1: Generate the boilerplate

Use our CLI tool to generate a plugin template:

```bash
npx @example/plugin-cli create my-awesome-plugin
```

### Step 2: Implement the entry point

Edit the `index.js` file:

```javascript
module.exports = function(pluginContext) {
  // Plugin initialization code
  
  return {
    // Hook implementations
    hooks: {
      'before:process': async function(data, options) {
        // Modify data before processing
        data.timestamp = Date.now();
        return data;
      },
      
      'after:process': async function(result, originalData) {
        // Modify results after processing
        console.log(`Processed data for: ${originalData.id}`);
        return result;
      },
      
      'init': async function() {
        // Initialize plugin
        console.log('My awesome plugin initialized!');
      }
    },
    
    // Custom actions
    actions: {
      doSomethingAwesome: async function(params) {
        // Implement custom functionality
        return { success: true, message: 'Something awesome happened!' };
      }
    }
  };
};
```

## Special Characters in Plugins

Plugins may need to handle special characters in various contexts. Here are some examples:

### Escaping in Strings

```javascript
const specialChars = {
  'newline': '\n',
  'tab': '\t',
  'backslash': '\\',
  'quotes': '\"\'',
  'unicode': '\u2764\ufe0f',
  'emoji': 'ðŸ”Œ'
};
```

### Regular Expressions

```javascript
// Match special patterns
const pattern = /^[a-z0-9_-]+$/i;
const emailPattern = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;

function isValidPluginName(name) {
  return pattern.test(name);
}

function containsEmoji(str) {
  const emojiRegex = /[\u{1F600}-\u{1F64F}]/u;
  return emojiRegex.test(str);
}
```

### JSON Handling

```javascript
function parseConfig(configStr) {
  try {
    // Handle escaped quotes and special chars in JSON
    return JSON.parse(configStr);
  } catch (e) {
    throw new Error(`Invalid plugin configuration: ${e.message}`);
  }
}
```

## Plugin Configuration

Plugins can be configured through the `config` property:

```javascript
module.exports = function(pluginContext) {
  // Get configuration
  const config = pluginContext.config || {};
  
  // Set defaults
  const settings = {
    debug: false,
    timeout: 5000,
    retries: 3,
    ...config
  };
  
  // Rest of plugin code
  // ...
};
```

## Hooks Reference

| Hook Name | Description | Parameters |
|-----------|-------------|------------|
| `init` | Called when the system initializes | None |
| `before:process` | Called before data processing | `(data, options)` |
| `after:process` | Called after data processing | `(result, originalData)` |
| `error` | Called when an error occurs | `(error, context)` |
| `shutdown` | Called when the system is shutting down | None |

## Common Plugin Examples

### Logging Plugin

```javascript
// logger-plugin/index.js
module.exports = function(ctx) {
  return {
    hooks: {
      'before:process': async (data) => {
        console.log(`[${new Date().toISOString()}] Processing started for ${data.id}`);
        return data;
      },
      'after:process': async (result) => {
        console.log(`[${new Date().toISOString()}] Processing completed`);
        return result;
      },
      'error': async (error) => {
        console.error(`[${new Date().toISOString()}] Error:`, error);
      }
    }
  };
};
```

### Data Transformation Plugin

```javascript
// transformer-plugin/index.js
module.exports = function(ctx) {
  return {
    hooks: {
      'before:process': async (data) => {
        // Convert all string values to lowercase
        Object.keys(data).forEach(key => {
          if (typeof data[key] === 'string') {
            data[key] = data[key].toLowerCase();
          }
        });
        
        return data;
      }
    }
  };
};
```

## Plugin Best Practices

1. **Idempotency**: Ensure your plugin functions can be called multiple times with the same input and produce the same result
2. **Error Handling**: Properly catch and handle errors to prevent plugin failures from affecting the core system
3. **Resource Management**: Clean up resources in the `shutdown` hook
4. **Versioning**: Follow semantic versioning for your plugins
5. **Documentation**: Provide clear documentation and examples
6. **Testing**: Write tests for your plugin functionality

## Troubleshooting

Common issues and solutions:

### Plugin Not Loading

- Check the plugin's `compatibleWith` field matches the current system version
- Verify the plugin's dependencies are installed
- Check for syntax errors in the plugin code

### Permission Issues

- Ensure the plugin has the necessary permissions defined in its `plugin.json`
- Check if the current user has the required permissions to use the plugin

### Performance Problems

- Look for infinite loops or excessive resource usage
- Optimize async operations and avoid blocking the main thread
- Add appropriate timeouts to external API calls

---

## Changelog


All notable changes to this project will be documented in this file.

The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),
and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).

## [Unreleased]

### Added
- Experimental support for WebSocket connections
- New event subscription model for real-time updates

### Changed
- Improved error messaging for authentication failures

## [3.2.1] - 2023-11-15

### Fixed
- Fixed regression in error handling for network timeouts
- Corrected TypeScript definitions for the `configure()` method

### Security
- Updated dependencies to address potential vulnerability in a third-party package

## [3.2.0] - 2023-10-28

### Added
- New `batchProcess()` method for handling multiple items efficiently
- Support for custom retry strategies
- Added TypeScript 5.0 compatibility

### Changed
- Improved performance of large dataset processing by approximately 35%
- Enhanced logging with more context and better formatting
- Updated documentation with more examples

### Deprecated
- The `legacyFetch()` method is now deprecated and will be removed in v4.0

## [3.1.2] - 2023-09-12

### Fixed
- Addressed memory leak when processing very large datasets
- Fixed incorrect handling of UTF-8 characters in certain API responses
- Resolved issue with connection pooling under high load

## [3.1.1] - 2023-08-05

### Fixed
- Corrected an issue where rate limiting wasn't properly handled
- Fixed TypeScript type definitions for optional parameters

## [3.1.0] - 2023-07-18

### Added
- New caching layer for frequently accessed resources
- Support for request interceptors
- Added `debug` mode with detailed logging

### Changed
- Improved error handling with more descriptive messages
- Enhanced performance for batch operations

## [3.0.0] - 2023-06-02

### Added
- Complete rewrite with TypeScript
- New plugin system for extending functionality
- Built-in support for rate limiting
- Comprehensive test suite with 95%+ coverage

### Changed
- Simplified API with more consistent method names
- Improved documentation with more examples
- Better error handling with detailed error types
- Enhanced performance for most operations

### Removed
- Removed support for callback-style API (now Promise-based only)
- Dropped support for Node.js versions below 14
- Removed deprecated methods from v2.x

## [2.5.4] - 2023-03-15

### Fixed
- Addressed security vulnerability in dependency
- Fixed handling of unexpected server responses

## [2.5.3] - 2023-02-27

### Fixed
- Resolved issue with connection timeouts
- Fixed memory leak in connection pooling

## [2.5.2] - 2023-01-18

### Fixed
- Corrected TypeScript definitions
- Fixed JSON parsing error for certain response types

## [2.5.1] - 2022-12-05

### Fixed
- Addressed race condition in concurrent requests
- Fixed handling of redirect responses

## [2.5.0] - 2022-11-20

### Added
- Support for Node.js 18
- New methods for resource management
- Enhanced logging capabilities

### Changed
- Improved error reporting
- Better handling of network instability

## [2.4.2] - 2022-10-08

### Fixed
- Resolved regression in error handling
- Fixed memory consumption issue during large uploads

## [2.4.1] - 2022-09-15

### Security
- Updated dependencies to address security vulnerabilities

## [2.4.0] - 2022-08-22

### Added
- New authentication methods
- Support for custom headers
- Enhanced caching options

### Changed
- Improved performance for bulk operations
- Better handling of network errors with automatic retries

## [2.3.0] - 2022-07-10

### Added
- Streaming API for large data sets
- Custom serialization options
- Support for proxy configurations

### Fixed
- Several edge cases in error handling
- Improved resilience to network failures

## [2.2.1] - 2022-06-05

### Fixed
- Corrected handling of certain error conditions
- Fixed documentation links

## [2.2.0] - 2022-05-18

### Added
- New utility functions for common operations
- Enhanced logging with more detail levels

### Changed
- Improved validation for input parameters
- Better error messages for common mistakes

## [2.1.0] - 2022-04-03

### Added
- Support for custom timeout configurations
- New helper methods for common patterns

### Fixed
- Several edge cases in the request pipeline
- Improved handling of connection resets

## [2.0.0] - 2022-03-01

### Added
- Promise-based API (while maintaining callback support)
- Comprehensive documentation
- New configuration options

### Changed
- Modern codebase with ES6+ features
- Improved error handling
- Better performance across all operations

### Removed
- Deprecated methods from v1.x

## [1.9.5] - 2022-01-15

### Fixed
- Final bug fixes before v2.0 release

## [1.0.0] - 2021-07-01

### Added
- Initial stable release

---

## Authentication Examples


This page provides examples of how to authenticate with our API in various programming languages.

## API Key Authentication

The simplest way to authenticate is using an API key in the request header.

### JavaScript

```javascript
const fetch = require('node-fetch');

async function fetchData() {
  const response = await fetch('https://api.example.com/v1/resources', {
    headers: {
      'Authorization': 'Bearer YOUR_API_KEY',
      'Content-Type': 'application/json'
    }
  });
  
  const data = await response.json();
  console.log(data);
}

fetchData().catch(console.error);
```

### Python

```python
import requests

def fetch_data():
    headers = {
        'Authorization': 'Bearer YOUR_API_KEY',
        'Content-Type': 'application/json'
    }
    
    response = requests.get(
        'https://api.example.com/v1/resources',
        headers=headers
    )
    
    response.raise_for_status()  # Raise exception for 4XX/5XX responses
    return response.json()

try:
    data = fetch_data()
    print(data)
except requests.exceptions.RequestException as e:
    print(f"Error fetching data: {e}")
```

### Ruby

```ruby
require 'net/http'
require 'uri'
require 'json'

def fetch_data
  uri = URI('https://api.example.com/v1/resources')
  request = Net::HTTP::Get.new(uri)
  request['Authorization'] = 'Bearer YOUR_API_KEY'
  request['Content-Type'] = 'application/json'
  
  response = Net::HTTP.start(uri.hostname, uri.port, use_ssl: true) do |http|
    http.request(request)
  end
  
  JSON.parse(response.body)
end

begin
  data = fetch_data
  puts data
rescue StandardError => e
  puts "Error fetching data: #{e.message}"
end
```

### Go

```go
package main

import (
	"encoding/json"
	"fmt"
	"io/ioutil"
	"net/http"
)

func fetchData() (map[string]interface{}, error) {
	req, err := http.NewRequest("GET", "https://api.example.com/v1/resources", nil)
	if err != nil {
		return nil, err
	}
	
	req.Header.Set("Authorization", "Bearer YOUR_API_KEY")
	req.Header.Set("Content-Type", "application/json")
	
	client := &http.Client{}
	resp, err := client.Do(req)
	if err != nil {
		return nil, err
	}
	defer resp.Body.Close()
	
	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("unexpected status: %s", resp.Status)
	}
	
	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		return nil, err
	}
	
	var result map[string]interface{}
	if err := json.Unmarshal(body, &result); err != nil {
		return nil, err
	}
	
	return result, nil
}

func main() {
	data, err := fetchData()
	if err != nil {
		fmt.Printf("Error fetching data: %v\n", err)
		return
	}
	
	fmt.Printf("%+v\n", data)
}
```

## OAuth 2.0 Authentication

For services that require OAuth 2.0 authentication, use the following examples.

### JavaScript

```javascript
const axios = require('axios');

async function getAccessToken() {
  const response = await axios.post('https://auth.example.com/oauth/token', {
    grant_type: 'client_credentials',
    client_id: 'YOUR_CLIENT_ID',
    client_secret: 'YOUR_CLIENT_SECRET',
    audience: 'https://api.example.com'
  });
  
  return response.data.access_token;
}

async function fetchDataWithOAuth() {
  try {
    const token = await getAccessToken();
    
    const response = await axios.get('https://api.example.com/v1/resources', {
      headers: {
        'Authorization': `Bearer ${token}`,
        'Content-Type': 'application/json'
      }
    });
    
    console.log(response.data);
  } catch (error) {
    console.error('Error:', error.message);
  }
}

fetchDataWithOAuth();
```

### Python

```python
import requests

def get_access_token():
    payload = {
        'grant_type': 'client_credentials',
        'client_id': 'YOUR_CLIENT_ID',
        'client_secret': 'YOUR_CLIENT_SECRET',
        'audience': 'https://api.example.com'
    }
    
    response = requests.post(
        'https://auth.example.com/oauth/token',
        json=payload
    )
    
    response.raise_for_status()
    return response.json()['access_token']

def fetch_data_with_oauth():
    try:
        token = get_access_token()
        
        headers = {
            'Authorization': f'Bearer {token}',
            'Content-Type': 'application/json'
        }
        
        response = requests.get(
            'https://api.example.com/v1/resources',
            headers=headers
        )
        
        response.raise_for_status()
        return response.json()
    except requests.exceptions.RequestException as e:
        print(f"Error: {e}")
        return None

data = fetch_data_with_oauth()
if data:
    print(data)
```

## Using Environment Variables

For security best practices, it's recommended to use environment variables for storing sensitive credentials.

### JavaScript (Node.js)

```javascript
// First, install dotenv: npm install dotenv
require('dotenv').config();

const axios = require('axios');

async function fetchData() {
  try {
    const apiKey = process.env.API_KEY;
    
    if (!apiKey) {
      throw new Error('API_KEY environment variable is not set');
    }
    
    const response = await axios.get('https://api.example.com/v1/resources', {
      headers: {
        'Authorization': `Bearer ${apiKey}`,
        'Content-Type': 'application/json'
      }
    });
    
    console.log(response.data);
  } catch (error) {
    console.error('Error:', error.message);
  }
}

fetchData();
```

### Python

```python
import os
import requests
from dotenv import load_dotenv

# Load environment variables from .env file
load_dotenv()

def fetch_data():
    api_key = os.getenv('API_KEY')
    
    if not api_key:
        raise ValueError('API_KEY environment variable is not set')
    
    headers = {
        'Authorization': f'Bearer {api_key}',
        'Content-Type': 'application/json'
    }
    
    response = requests.get(
        'https://api.example.com/v1/resources',
        headers=headers
    )
    
    response.raise_for_status()
    return response.json()

try:
    data = fetch_data()
    print(data)
except Exception as e:
    print(f"Error: {e}")
```

## Handling Authentication Errors

Always implement proper error handling for authentication issues.

### JavaScript

```javascript
async function fetchWithErrorHandling() {
  try {
    const response = await fetch('https://api.example.com/v1/resources', {
      headers: {
        'Authorization': 'Bearer YOUR_API_KEY',
        'Content-Type': 'application/json'
      }
    });
    
    if (response.status === 401) {
      console.error('Authentication failed: Invalid or expired API key');
      // Implement retry logic or prompt for new credentials
      return;
    }
    
    if (response.status === 403) {
      console.error('Authorization failed: Insufficient permissions');
      return;
    }
    
    if (!response.ok) {
      console.error(`API Error: ${response.status} ${response.statusText}`);
      return;
    }
    
    const data = await response.json();
    console.log(data);
  } catch (error) {
    console.error('Network error:', error.message);
  }
}

fetchWithErrorHandling();
```

## Best Practices

1. **Never hardcode API keys or secrets** in your application code
2. **Use environment variables** or secure credential storage
3. **Implement proper error handling** for authentication failures
4. **Set up automatic token refresh** for OAuth implementations
5. **Use HTTPS** for all API communications
6. **Implement rate limiting handling** to avoid lockouts
7. **Follow the principle of least privilege** when requesting permissions

---

## Frequently Asked Questions


Find answers to commonly asked questions about our product.

## General Questions

### What is this product?

Our product is a comprehensive SDK that allows developers to integrate with our platform services. It provides a simple, consistent API for accessing data, performing operations, and implementing custom workflows.

### Who should use this SDK?

The SDK is designed for developers who need to integrate our services into their applications. It's particularly useful for:

- Frontend developers building web or mobile applications
- Backend developers creating services that interact with our platform
- DevOps engineers setting up automated workflows

### Is the SDK free to use?

The SDK itself is free and open-source. However, usage of our platform services may require a subscription or pay-as-you-go plan depending on your usage volume. See our [pricing page](https://example.com/pricing) for details.

## Installation & Setup

### What are the system requirements?

- Node.js v14 or higher
- Internet connection for API calls
- Valid API credentials

### How do I install the SDK?

```bash
# Using npm
npm install @example/sdk

# Using yarn
yarn add @example/sdk

# Using pnpm
pnpm add @example/sdk
```

### Where do I get an API key?

You can obtain an API key by:

1. Creating an account on our [developer portal](https://developers.example.com)
2. Creating a new project
3. Navigating to the "API Keys" section
4. Generating a new key

## Troubleshooting

### Why am I getting authentication errors?

Common reasons for authentication errors:

1. **Invalid API key**: Double-check that your API key is correct and hasn't expired
2. **Permissions issue**: Ensure your API key has the necessary permissions for the operations you're trying to perform
3. **Environment mismatch**: Verify you're using the correct key for your environment (development vs. production)

### How do I handle rate limiting?

Our API implements rate limiting to ensure fair usage. If you encounter rate limit errors (HTTP 429), you should:

1. Implement exponential backoff in your retry logic
2. Consider caching frequently accessed data
3. Optimize your code to batch requests where possible
4. If you consistently hit rate limits, contact us about higher-tier plans

### The SDK isn't working in my environment

If you're experiencing issues:

1. Check that you're using a compatible Node.js version
2. Verify your network connectivity
3. Enable debug mode for detailed logs:
   ```javascript
   const sdk = new SDK({
     debug: true,
     // other options...
   });
   ```
4. Check our [GitHub issues](https://github.com/example/sdk/issues) to see if it's a known problem

## Advanced Usage

### Can I use the SDK in a browser environment?

Yes, the SDK can be used in both Node.js and browser environments. However, for browser usage:

1. Never include your API key directly in client-side code
2. Set up a proxy service for secure API communication
3. Use our specific browser bundle:
   ```html
   
   ```

### How do I handle webhook events?

To process webhook events:

1. Set up a webhook endpoint in your application
2. Register the endpoint URL in our developer portal
3. Use the SDK's webhook verification to ensure the events are authentic:
   ```javascript
   import { verifyWebhookSignature } from '@example/sdk/webhooks';
   
   app.post('/webhooks', (req, res) => {
     const isValid = verifyWebhookSignature(
       req.body,
       req.headers['x-webhook-signature'],
       process.env.WEBHOOK_SECRET
     );
     
     if (!isValid) {
       return res.status(401).send('Invalid signature');
     }
     
     // Process the webhook event
     handleEvent(req.body);
     
     res.status(200).send('OK');
   });
   ```

## Support & Resources

### Where can I get help?

- [Documentation](https://docs.example.com)
- [Community Forum](https://community.example.com)
- [GitHub Issues](https://github.com/example/sdk/issues)
- Email support: support@example.com

### How do I report a bug?

To report a bug:

1. Check existing GitHub issues to see if it's already reported
2. Gather relevant information (SDK version, error messages, steps to reproduce)
3. Create a new issue on our [GitHub repository](https://github.com/example/sdk/issues/new)
4. For security issues, please email security@example.com instead

---

## Getting Started


This is a getting started guide.

---

## Advanced Usage Guide


This guide covers advanced usage scenarios and configuration options for experienced users.

## Custom Authentication Providers

For enterprises with custom authentication requirements, our SDK supports implementing custom authentication providers.

### Creating a Custom Auth Provider

Create a class that implements the `AuthProvider` interface:

```typescript
import { AuthProvider, AuthResponse } from '@example/sdk';

export class CustomAuthProvider implements AuthProvider {
  constructor(private readonly options: CustomAuthOptions) {}
  
  async getAuthToken(): Promise {
    // Implement your custom authentication logic
    // For example, integrating with your SSO solution
    
    return {
      token: 'your-generated-token',
      expiresAt: new Date(Date.now() + 3600 * 1000) // 1 hour from now
    };
  }
  
  async refreshToken(expiredToken: string): Promise {
    // Implement your token refresh logic
    
    return {
      token: 'your-refreshed-token',
      expiresAt: new Date(Date.now() + 3600 * 1000)
    };
  }
}
```

### Using Your Custom Auth Provider

Initialize the SDK with your custom provider:

```typescript
import { SDK } from '@example/sdk';
import { CustomAuthProvider } from './custom-auth-provider';

const authProvider = new CustomAuthProvider({
  // Your custom auth options
  tenantId: 'your-tenant-id',
  clientSecret: process.env.CLIENT_SECRET
});

const sdk = new SDK({
  baseUrl: 'https://api.example.com/v2',
  authProvider
});
```

## Request Middleware

The SDK supports middleware for modifying requests before they're sent. This is useful for adding custom headers, logging, or applying transformations.

### Creating Request Middleware

```typescript
import { RequestMiddleware, RequestContext } from '@example/sdk';

export const loggingMiddleware: RequestMiddleware = async (context: RequestContext, next) => {
  console.log(`Request to ${context.request.url} initiated`);
  
  // Measure request duration
  const startTime = Date.now();
  
  // Continue to the next middleware or to the actual request
  const response = await next(context);
  
  console.log(`Request to ${context.request.url} completed in ${Date.now() - startTime}ms`);
  
  return response;
};

export const customHeadersMiddleware: RequestMiddleware = async (context: RequestContext, next) => {
  // Add custom headers
  context.request.headers = {
    ...context.request.headers,
    'x-tenant-id': 'your-tenant-id',
    'x-custom-tracking': 'advanced-usage'
  };
  
  return next(context);
};
```

### Registering Middleware

```typescript
sdk.use(loggingMiddleware);
sdk.use(customHeadersMiddleware);
```

## Handling Rate Limits

For scenarios where you need to handle rate limiting gracefully, implement a custom retry strategy:

```typescript
import { RetryStrategy, RetryContext } from '@example/sdk';

export class CustomRetryStrategy implements RetryStrategy {
  async shouldRetry(context: RetryContext): Promise {
    // Only retry rate limit errors (429)
    if (context.error.status !== 429) {
      return false;
    }
    
    // Check if we've already retried too many times
    if (context.retryCount >= 3) {
      return false;
    }
    
    // Parse the rate limit reset time from the headers
    const resetTime = parseInt(context.error.headers['x-rate-limit-reset'] || '0', 10);
    
    if (resetTime) {
      // Wait until the rate limit resets
      const waitTime = Math.max(0, resetTime - Math.floor(Date.now() / 1000));
      console.log(`Rate limited, waiting for ${waitTime} seconds before retrying`);
      
      await new Promise(resolve => setTimeout(resolve, waitTime * 1000));
      return true;
    }
    
    // Use exponential backoff if no reset time is provided
    const backoffTime = Math.pow(2, context.retryCount) * 1000;
    await new Promise(resolve => setTimeout(resolve, backoffTime));
    
    return true;
  }
}
```

Apply your custom retry strategy:

```typescript
sdk.setRetryStrategy(new CustomRetryStrategy());
```

## Performance Optimization

### Connection Pooling

For high-throughput applications, enable connection pooling:

```typescript
const sdk = new SDK({
  // ...other options
  http: {
    keepAlive: true,
    maxSockets: 50, // Adjust based on your needs
    timeout: 30000 // 30 seconds
  }
});
```

### Response Caching

Implement response caching for frequently accessed data:

```typescript
import { createCache, MemoryStorage } from '@example/sdk/cache';

// Create a cache with TTL of 5 minutes
const cache = createCache({
  storage: new MemoryStorage(),
  defaultTtl: 5 * 60 * 1000
});

// Apply cache to the SDK
sdk.setCache(cache);

// Now results will be cached
const data = await sdk.resources.get('resource-id');
// Subsequent calls will use cached data if available
```

## Conclusion

These advanced configurations allow you to customize the SDK behavior for complex enterprise scenarios. For additional assistance, contact our [enterprise support team](mailto:enterprise-support@example.com).

---

## Home

# Home Page

Welcome to the test docs.

---

## Quick Start Guide


This guide will help you set up and run your first application in less than 5 minutes.

## Prerequisites

Before you begin, make sure you have:

- Node.js v16 or higher installed
- A valid account on our platform
- Basic knowledge of JavaScript

## Step 1: Installation

Install the package using npm:

```bash
npm install @example/sdk
```

## Step 2: Create Configuration File

Create a file named `config.js` with the following content:

```javascript
module.exports = {
  apiKey: 'YOUR_API_KEY',
  environment: 'development',
  debug: true
};
```

Replace `YOUR_API_KEY` with the key from your account dashboard.

## Step 3: Initialize the SDK

Create an `index.js` file:

```javascript
const ExampleSDK = require('@example/sdk');
const config = require('./config');

async function main() {
  // Initialize the SDK
  const sdk = new ExampleSDK(config);
  
  // Verify connection
  const status = await sdk.checkStatus();
  console.log('Connection status:', status);
  
  // Your application code goes here
}

main().catch(console.error);
```

## Step 4: Run Your Application

Execute your application with:

```bash
node index.js
```

You should see the connection status printed in your console.

## Next Steps

- Explore the [API Reference](/api/overview) to learn about all available methods
- Check out our [Examples](https://github.com/example/sdk-examples) repository
- Join our [Discord community](https://discord.gg/example) for support

## Troubleshooting

If you encounter any issues, please verify:

1. Your API key is correct
2. You have the latest version of the SDK
3. Your network allows connections to our API servers
